name: Pruebas de Python y Escaneo de Seguridad

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  complete_scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout del código
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        
    - name: Instalar dependencias
      run: |
        echo "Instalando dependencias..."
        python -m pip install --upgrade pip
        pip install pytest requests selenium
        
    - name: Ejecutar pruebas de Pytest
      run: |
        echo "Ejecutando pruebas de Pytest..."
        pytest
    
    # Este paso construye la imagen de Docker de tu aplicación.
    - name: Construir la imagen de Docker de la aplicación
      run: |
        docker build -t mi-app-web .

    # Este paso crea una red de Docker para que los contenedores puedan comunicarse.
    - name: Crear red de Docker y ejecutar el contenedor de la aplicación
      run: |
        docker network create zap-scan-network
        docker run -d --rm --name mi-app --network zap-scan-network mi-app-web
        
        echo "Esperando 30 segundos para que el contenedor de la aplicación inicie completamente..."
        sleep 30
        
    - name: Escanear la aplicación con OWASP ZAP
      # Aquí, ZAP se une a la misma red y se conecta a la aplicación usando el nombre del contenedor.
      # Esto elimina problemas de conexión entre contenedores.
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://mi-app:5000'
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        docker_options: --network zap-scan-network
