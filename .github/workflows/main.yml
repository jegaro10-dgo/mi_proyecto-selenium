name: Pruebas de Python y Escaneo de Seguridad

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  complete_scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout del código
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests selenium
        
    - name: Ejecutar pruebas de Pytest
      run: |
        echo "Ejecutando pruebas de Pytest..."
        pytest
    
    - name: Construir y ejecutar la aplicación en un contenedor de Docker
      # Este paso construye la imagen de Docker de tu aplicación y la inicia en segundo plano.
      # Usamos `docker run` para iniciarla en la red del host, permitiendo que ZAP se conecte a ella.
      run: |
        docker build -t mi-app-web .
        docker run -d --rm --name mi-app -p 5000:5000 mi-app-web
        echo "Esperando 10 segundos para que el contenedor de la aplicación inicie..."
        sleep 10
        
    - name: Escanear la aplicación con OWASP ZAP
      # Ahora ZAP se conecta a `http://localhost:5000`, que está mapeado al contenedor de tu aplicación.
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:5000'
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
