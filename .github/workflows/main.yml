# Archivo: .github/workflows/main.yml
name: Pruebas de Python y Escaneo de Seguridad

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Se ha fusionado el trabajo de 'build' y 'zap_scan' en una sola tarea.
  complete_scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout del código
      # Es necesario para que el runner tenga acceso a todos los archivos.
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests selenium
        
    - name: Iniciar la aplicación web de prueba
      # Se inicia la aplicación en segundo plano usando '&'.
      # `sleep 10` le da tiempo suficiente para que se inicie completamente.
      run: |
        python app.py &
        echo "Esperando 10 segundos para que la aplicación se inicie en segundo plano..."
        sleep 10
        
    - name: Ejecutar pruebas de Pytest
      # Ahora las pruebas se ejecutan mientras la aplicación está en marcha.
      run: |
        echo "Ejecutando pruebas de Pytest..."
        pytest
    
    - name: Escanear la aplicación con OWASP ZAP
      # Este paso se ejecuta después de que la aplicación esté en marcha y las pruebas hayan pasado.
      uses: zaproxy/action-baseline@v0.12.0
      with:
        # La URL a escanear. Se mantiene la configuración anterior que ya funcionaba.
        target: 'http://localhost:5000'
        # Se especifica la imagen de Docker actualizada para evitar el error de acceso.
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'

